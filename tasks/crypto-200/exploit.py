#!/usr/bin/python3

import random

from string import ascii_uppercase, ascii_lowercase, digits
from storage import PasswordGenerator


class ReversedGenerator(PasswordGenerator):
    def skip(self, count):
        for _ in range(count):
            self._shift()

    def reverse(self, passwords):
        results = []
        for password in passwords:
            results.append(self._values(password))
            self._shift()
        for _ in range(len(passwords)):
            self._unshift()
        return results

    def _values(self, password):
        size = 2
        al_parts = self._parts(self._alphabet, size)
        pw_parts = self._parts(password, size)
        return [al_parts.index(part) for part in pw_parts]

    def _unshift(self):
        value = 4
        self._alphabet = self._alphabet[value:] + self._alphabet[:value]


def detemper(x):
    x ^= (x >> 18)
    x ^= (x << 15) & 0xEFC60000
    x ^= (x << 7) & 0x1680
    x ^= (x << 7) & 0xC4000
    x ^= (x << 7) & 0xD200000
    x ^= (x << 7) & 0x90000000
    x ^= (x >> 11) & 0xFFC00000
    x ^= (x >> 11) & 0x3FF800
    x ^= (x >> 11) & 0x7FF
    return x


def untwist(state):
    for i in range(623, -1, -1):
        result = 0
        tmp = state[i]
        tmp ^= state[(i + 397) % 624]
        if ((tmp & 0x80000000) == 0x80000000):
            tmp ^= 0x9908b0df
        result = (tmp << 1) & 0x80000000
        tmp = state[(i - 1 + 624) % 624]
        tmp ^= state[(i + 396) % 624]
        if ((tmp & 0x80000000) == 0x80000000):
            tmp ^= 0x9908b0df
            result |= 1
        result |= (tmp << 1) & 0x7fffffff
        state[i] = result


def to_numbers(symbols):
    bits = ''
    for symbol in symbols:
        index = alpabet.index(symbol)
        bits += bin(index)[2:].zfill(6)
    return [int(bits[i:i+32], 2) for i in range(0, len(bits), 32)]


def predict(passwords):
    numbers = to_numbers(''.join(passwords))
    state = [detemper(number) for number in numbers]
    untwist(state)
    rnd = random.Random()
    print(state)
    rnd.setstate((3, tuple(state + [623]), None))
    return ''.join(rnd.choice(alpabet) for i in range(password_length))


def test_passwords(length, count):
    gen = PasswordGenerator()
    admin = gen.generate(length)
    return [gen.generate(length) for _ in range(count)]


def main():
    length = 8
    passwords = test_passwords(length, 600)
    rgen = ReversedGenerator()
    rgen.skip(1)
    data = sum(rgen.reverse(passwords), [])
    print(data)

if __name__ == '__main__':
    main()


# seed = 0x65536


# rnd1 = random.Random(seed)
# rnd2 = PythonMT19937(seed)

# # s = [rnd1.getrandbits(32) for i in range(1000)]

# # s1 = [rnd2.extract() for i in range(624)]

# # print(rnd2.index)
# pw1 = rnd2.extract()
# print(rnd2.mt)
# state = [detemper(rnd2.extract()) for i in range(624)]
# rnd2.mt = state
# untwist(state)
# rnd2.index = 623
# print(rnd2.mt)
# pw2 = rnd2.extract()
# print(pw1, pw2)

# # print(rnd1.getstate())
# rnd1.setstate((3, tuple(state + [623]), None))
# print(rnd1.getrandbits(32))
