#!/usr/bin/python3

import sys
import random

from base64 import b64decode, b64encode
from crypto import PasswordGenerator


def detemper(x):
    x ^= (x >> 18)
    x ^= (x << 15) & 0xEFC60000
    x ^= (x << 7) & 0x1680
    x ^= (x << 7) & 0xC4000
    x ^= (x << 7) & 0xD200000
    x ^= (x << 7) & 0x90000000
    x ^= (x >> 11) & 0xFFC00000
    x ^= (x >> 11) & 0x3FF800
    x ^= (x >> 11) & 0x7FF
    return x


def untwist(state):
    for i in range(623, -1, -1):
        result = 0
        tmp = state[i]
        tmp ^= state[(i + 397) % 624]
        if ((tmp & 0x80000000) == 0x80000000):
            tmp ^= 0x9908b0df
        result = (tmp << 1) & 0x80000000
        tmp = state[(i - 1 + 624) % 624]
        tmp ^= state[(i + 396) % 624]
        if ((tmp & 0x80000000) == 0x80000000):
            tmp ^= 0x9908b0df
            result |= 1
        result |= (tmp << 1) & 0x7fffffff
        state[i] = result


def get_values(password):
    data = b64decode(password, b'@$')
    number = int(data.hex(), 16)
    values = []
    while number > 0:
        current = number & 0xFFFFFFFF
        values.append(detemper(current))
        number >>= 32
    return values


def test_data():
    generator = PasswordGenerator(16)
    admin = generator.generate()
    count = 624 * 32 // 12 // 8
    passwords = [generator.generate() for _ in range(count * 2 - 1)]
    return admin, passwords

    
def hack(passwords):
    values = sum(map(get_values, passwords), [])[-624:]
    untwist(values)
    rnd = random.Random()
    rnd.setstate((3, tuple(values + [0]), None))
    data = hex(rnd.getrandbits(12 * 8))[2:].zfill(12 * 2)
    password = b64encode(bytes.fromhex(data), b'@$').decode()
    return password


def main():
    if len(sys.argv) < 2:
        admin, passwords = test_data()
        if admin == hack(passwords):
            print('success')
        else:
            print('fail')
    else:
        with open(sys.argv[1], 'r') as file:
            passwords = file.read().split('\n')
        print(hack(passwords))


if __name__ == '__main__':
    main()
