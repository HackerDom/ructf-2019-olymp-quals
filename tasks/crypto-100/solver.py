#!/usr/bin/python3

from gmpy2 import iroot
from Crypto.Util.number import bytes_to_long, long_to_bytes


def brute(n, c, start):
    k = 1
    while k * n + c < start:
        k += 1
    return k * n + c


def main():
    exponent = 3
    modulus = 5873474411389687066479752710905805093792643888236819680112457467218799802874182862433030599419460928535677043337352388859166158041255159777167915134883924035063744305085255475605249226347404450500767162166526992543131130396198211662993797861048894946568767452108927191507
    ciphertext = 5804629700103300312931165698547920769757407794383574830926434767265835955999126972682404039614888882302135402559791771317125417837661173811825551232904047722262746446221844588744432153001829848251755516687221468161048861457311649399626685243014205288770658840979065125211
    start = bytes_to_long(b'RuCTF_' + b'0' * 32) ** exponent
    power = brute(modulus, ciphertext, start)
    flag, _ = iroot(power, exponent)
    print(long_to_bytes(flag))


if __name__ == '__main__':
    main()
