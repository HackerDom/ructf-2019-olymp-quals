#!/usr/bin/python3

from gmpy2 import iroot
from Crypto.Util.number import bytes_to_long, long_to_bytes


def brute(n, c, start):
    k = 1
    while k * n + c < start:
        k += 1
    return k * n + c


def main():
    exponent = 3
    modulus = 4158933398832304390357360708556050233042862492737950725623500889120525019555544776488744969302955892929012277502408629621979491634510030058439185936125472689494652252993688393085084957259941284893864408150826652709820047963127021651197332297431158381328648003095465171976
    ciphertext = 822129457101344823616420057503754367199836907649930409634851166644641882897520145685300059607492641029422751011260952803393719529884133890643227427271750915243303910686544529719662398829424945907813835396702553284777085362849116313552687322735584806884934593789476851255
    start = bytes_to_long(b'RuCTF_' + b'0' * 32) ** exponent
    power = brute(modulus, ciphertext, start)
    flag, _ = iroot(power, exponent)
    print(long_to_bytes(flag))


if __name__ == '__main__':
    main()
